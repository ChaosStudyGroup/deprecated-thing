var N = null;var searchIndex = {};
searchIndex["sonr"]={"doc":"","items":[[3,"Token","sonr","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",1,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",1,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",1,[[["self"],["poll"]],["result",["error"]]]],[3,"PollOpt","","Options supplied when registering an `Evented` handle with…",N,N],[3,"Poll","","Polls for readiness events on all registered values.",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"PreVec","","`PreVec`: a collection that allows inserts at a specific…",N,N],[0,"reactor","","",N,N],[3,"EventedReactor","sonr::reactor","The `EventedReactor` is driven by the `System`. TODO more…",N,N],[4,"Reaction","","",N,N],[13,"NoReaction","","",2,N],[13,"Value","","",2,N],[0,"combinators","","",N,N],[3,"Chain","sonr::reactor::combinators","",N,N],[3,"And","","",N,N],[3,"Callback","","",N,N],[3,"Map","","",N,N],[11,"new","","",3,[[["f"],["t"]],["self"]]],[11,"new","","",4,[[["t"],["u"]],["self"]]],[11,"new","","",5,[[["s"],["f"]],["self"]]],[11,"new","","",6,[[["s"],["f"]],["self"]]],[0,"producers","sonr::reactor","",N,N],[3,"EventedGenerator","sonr::reactor::producers","The [`EventedGenerator`] reacts as soon as the [`System`]…",N,N],[11,"new","","",7,[[["vec"]],["result"]]],[8,"Reactive","sonr::reactor","A reactor ...",N,N],[16,"Output","","The output passed to the next reactor in the chain.",8,N],[16,"Input","","Expected input type from the previous reactor in the chain.",8,N],[10,"reacting","","If `reacting` returns `true`, `react` is called and pushes…",8,[[["self"],["event"]],["bool"]]],[11,"react","","The generated output is passed as the input to the next…",8,[[["self"]],["reaction"]]],[11,"react_to","","React to the input of another reactor.",8,N],[11,"chain","","Chain two reactors together. The output of the first…",8,[[["self"],["t"]],["chain"]]],[11,"and","","Run two reactors independent of each other. ```no_run #…",8,[[["self"],["c"]],["and"]]],[11,"and_then","","Capture the output of a reactor in a closure. `no_run //…",8,[[["self"],["f"]],["callback"]]],[11,"map","","",8,[[["self"],["f"]],["map"]]],[11,"new","","Create a new instance of an `EventedReactor`.",9,[[["e"],["ready"]],["result"]]],[11,"inner","","Reference to the underlying evented type",9,[[["self"]],["e"]]],[11,"inner_mut","","Mutable reference to the underlying evented type",9,[[["self"]],["e"]]],[11,"token","","Return the `Token` used to register the inner type with…",9,[[["self"]],["token"]]],[11,"interest","","Return the interests of the reactor, usually readable…",9,[[["self"]],["ready"]]],[0,"system","sonr","",N,N],[3,"System","sonr::system","",N,N],[4,"SystemEvent","","Specific event the `System` responds to NOTE: There should…",N,N],[13,"Stop","","",10,N],[11,"init","","Initialise the system for the current thread. Should only…",11,[[],["result",["signalsender"]]]],[11,"register","","Register an `Evented` with the System.",11,N],[11,"reregister","","Reregister an evented reactor.",11,[[["eventedreactor"]],["result"]]],[11,"start","","Start the event loop. This will run until…",11,[[["r"]],["result"]]],[11,"free_token","","",11,[[["token"]]]],[11,"reserve_token","","",11,[[],["result",["token"]]]],[0,"net","sonr","",N,N],[0,"tcp","sonr::net","",N,N],[3,"TcpStream","sonr::net::tcp","A non-blocking TCP stream between a local socket and a…",N,N],[3,"TcpListener","","A structure representing a socket server",N,N],[3,"ReactiveTcpListener","","",N,N],[6,"ReactiveTcpStream","","",N,N],[11,"new","","",12,[[["tcplistener"]],["result"]]],[11,"bind","","",12,[[["str"]],["result"]]],[11,"token","","",12,[[["self"]],["token"]]],[0,"stream","sonr::net","",N,N],[3,"Stream","sonr::net::stream","A [`Stream`]",N,N],[11,"new","","",13,[[["t"]],["result"]]],[11,"token","","The token used to track readiness of the underlying stream",13,[[["self"]],["token"]]],[11,"readable","","Is the underlying object readable?",13,[[["self"]],["bool"]]],[11,"writable","","Is the underlying object writable?",13,[[["self"]],["bool"]]],[11,"inner","","Reference the underlying object",13,[[["self"]],["t"]]],[11,"inner_mut","","Mutable reference to the underlying object",13,[[["self"]],["t"]]],[0,"uds","sonr::net","",N,N],[3,"UnixListener","sonr::net::uds","A structure representing a Unix domain socket server.",N,N],[3,"UnixStream","","A Unix stream socket.",N,N],[3,"ReactiveUdsListener","","",N,N],[6,"ReactiveUdsStream","","",N,N],[11,"bind","","",14,N],[11,"token","","",14,[[["self"]],["token"]]],[0,"sync","sonr","",N,N],[4,"Capacity","sonr::sync","Queue / Signal capacity",N,N],[13,"Unbounded","","Unlimited number of messages",15,N],[13,"Bounded","","Limited number of messages",15,N],[0,"queue","","",N,N],[3,"ReactiveQueue","sonr::sync::queue","",N,N],[3,"Queue","","",N,N],[3,"ReactiveDeque","","",N,N],[3,"Dequeue","","",N,N],[11,"unbounded","","",16,[[],["self"]]],[11,"bounded","","",16,[[["usize"]],["self"]]],[11,"push","","",16,[[["self"],["t"]]]],[11,"deque","","",16,[[["self"]],["dequeue"]]],[11,"unbounded","","",17,[[],["self"]]],[11,"bounded","","",17,[[["usize"]],["self"]]],[11,"push","","",17,[[["self"],["t"]]]],[11,"deque","","",17,[[["self"]],["dequeue"]]],[11,"new","","",18,[[["dequeue"]],["result"]]],[11,"steal","","",18,[[["self"]],["steal"]]],[11,"bounded","","",19,[[["stealer"],["usize"]],["self"]]],[11,"unbounded","","",19,[[["stealer"]],["self"]]],[11,"sender","","",19,[[["self"]],["signalsender"]]],[11,"steal","","",19,[[["self"]],["steal"]]],[0,"signal","sonr::sync","",N,N],[3,"SignalSender","sonr::sync::signal","",N,N],[3,"SignalReceiver","","",N,N],[3,"ReactiveSignalReceiver","","React when new data is ready to be received",N,N],[11,"send","","",20,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"unbounded","","",21,[[],["self"]]],[11,"bounded","","",21,[[["usize"]],["self"]]],[11,"try_recv","","",21,[[["self"]],["result"]]],[11,"sender","","",21,[[["self"]],["signalsender"]]],[11,"new","","",22,[[["signalreceiver"]],["result"]]],[11,"try_recv","","",22,[[["self"]],["result"]]],[11,"token","","",22,[[["self"]],["token"]]],[11,"sender","","",22,[[["self"]],["signalsender"]]],[0,"broadcast","sonr::sync","",N,N],[3,"Broadcast","sonr::sync::broadcast","",N,N],[3,"ReactiveBroadcast","","",N,N],[11,"unbounded","","",23,[[],["self"]]],[11,"bounded","","",23,[[["usize"]],["self"]]],[11,"subscriber","","",23,[[["self"]],["signalreceiver"]]],[11,"publish","","",23,[[["self"],["t"]]]],[0,"errors","sonr","SONR default `Error`",N,N],[4,"Error","sonr::errors","Wrapping error type.",N,N],[13,"Io","","std::io::Error",24,N],[13,"NoConnection","","No connection: A connection with a specific `Token` no…",24,N],[13,"ConnectionRemoved","","The connection was removed either by closing the socket or…",24,N],[13,"NoCapacity","","The `PreVec` does not have capacity for the new entry",24,N],[13,"AlreadyRegistered","","The session was already registered. A session can only be…",24,N],[13,"NoUdsConnection","","No unix domain socket waiting for a connection",24,N],[13,"TryRecvError","","Try receive error",24,N],[13,"RecvError","","Receive error",24,N],[13,"AddrParseError","","Address parse error",24,N],[13,"FromUtf8Error","","From UTF8 error",24,N],[6,"Result","","Result type: `std::result::Error<T, Error>`",N,N],[11,"with_capacity","sonr","Create a `PreVec` with a set capacity. Inserting above…",25,[[["usize"]],["self"]]],[11,"with_capacity_and_offset","","Create a `PreVec` with a set capacity and offset.",25,[[["usize"],["usize"]],["self"]]],[11,"capacity","","Return the capacity",25,[[["self"]],["usize"]]],[11,"offset","","Return the offset",25,[[["self"]],["usize"]]],[11,"prevent_growth","","Prevent inserting above the capacity.",25,[[["self"]]]],[11,"enable_growth","","Enable the collection to grow and allocate more space.",25,[[["self"]]]],[11,"in_range","","Check if the index is within the range of the collection…",25,[[["self"],["usize"]],["bool"]]],[11,"set_offset","","Set the offset of the collection.",25,[[["self"],["usize"]]]],[11,"get","","Get an entry at a specific index",25,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Get a mutable entry at a specific index",25,[[["self"],["usize"]],["option"]]],[11,"insert","","Insert a value in the next available slot and return the…",25,[[["self"],["t"]],["result",["usize"]]]],[11,"remove","","Remove at index (inserting an empty entry)",25,[[["self"],["usize"]],["option"]]],[11,"len","","Number of occupied slots",25,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the collection has no entries",25,[[["self"]],["bool"]]],[11,"clear","","Remove all entries",25,[[["self"]]]],[11,"map","","",25,[[["self"],["f"]]]],[0,"prelude","","",N,N],[3,"Token","sonr::prelude","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","sonr","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","sonr::reactor","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","sonr::reactor::combinators","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","sonr::reactor::producers","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","sonr::system","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","sonr::net::tcp","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","sonr::net::stream","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","sonr::net::uds","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","sonr::sync","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","sonr::sync::queue","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","sonr::sync::signal","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","sonr::sync::broadcast","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","sonr::errors","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"sub","sonr","",27,[[["self"],["pollopt"]],["pollopt"]]],[11,"sub","","",29,[[["self"],["t"]],["ready"]]],[11,"hash","sonr::prelude","",0,N],[11,"bitxor","sonr","",27,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitxor","","",29,[[["self"],["t"]],["ready"]]],[11,"register","sonr::net::tcp","",31,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",31,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",31,[[["self"],["poll"]],["result",["error"]]]],[11,"register","","",30,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",30,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",30,[[["self"],["poll"]],["result",["error"]]]],[11,"from","sonr","",29,[[["unixready"]],["ready"]]],[11,"from","sonr::prelude","",0,[[["usize"]],["token"]]],[11,"eq","sonr","",27,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",27,[[["self"],["pollopt"]],["bool"]]],[11,"eq","","",29,[[["self"],["ready"]],["bool"]]],[11,"ne","","",29,[[["self"],["ready"]],["bool"]]],[11,"eq","sonr::prelude","",26,[[["self"],["event"]],["bool"]]],[11,"ne","","",26,[[["self"],["event"]],["bool"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"from_raw_fd","sonr::net::tcp","",30,[[["i32"]],["tcpstream"]]],[11,"from_raw_fd","","",31,[[["i32"]],["tcplistener"]]],[11,"bitor_assign","sonr","",29,N],[11,"bitand","","",27,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",29,[[["self"],["t"]],["ready"]]],[11,"cmp","sonr::prelude","",0,[[["self"],["token"]],["ordering"]]],[11,"cmp","sonr","",29,[[["self"],["ready"]],["ordering"]]],[11,"cmp","","",27,[[["self"],["pollopt"]],["ordering"]]],[11,"partial_cmp","sonr::prelude","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"partial_cmp","sonr","",29,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["ready"]],["bool"]]],[11,"le","","",29,[[["self"],["ready"]],["bool"]]],[11,"gt","","",29,[[["self"],["ready"]],["bool"]]],[11,"ge","","",29,[[["self"],["ready"]],["bool"]]],[11,"partial_cmp","","",27,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",27,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",27,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",27,[[["self"],["pollopt"]],["bool"]]],[11,"bitor","","",29,[[["self"],["t"]],["ready"]]],[11,"bitor","","",27,[[["self"],["pollopt"]],["pollopt"]]],[11,"read","sonr::net::tcp","",30,N],[11,"into_raw_fd","","",31,[[["self"]],["i32"]]],[11,"into_raw_fd","","",30,[[["self"]],["i32"]]],[11,"as_raw_fd","","",30,[[["self"]],["i32"]]],[11,"as_raw_fd","sonr","",28,[[["self"]],["i32"]]],[11,"as_raw_fd","sonr::net::tcp","",31,[[["self"]],["i32"]]],[11,"write","","",30,N],[11,"flush","","",30,[[["self"]],["result",["error"]]]],[11,"bitxor_assign","sonr","",29,N],[11,"clone","sonr::prelude","",26,[[["self"]],["event"]]],[11,"clone","sonr","",29,[[["self"]],["ready"]]],[11,"clone","sonr::prelude","",0,[[["self"]],["token"]]],[11,"clone","sonr","",27,[[["self"]],["pollopt"]]],[11,"sub_assign","","",29,N],[11,"bitand_assign","","",29,N],[11,"fmt","sonr::net::tcp","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr::prelude","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr::net::tcp","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr::prelude","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","sonr::net::uds","",33,N],[11,"into_raw_fd","","",33,[[["self"]],["i32"]]],[11,"into_raw_fd","","",32,[[["self"]],["i32"]]],[11,"as_raw_fd","","",32,[[["self"]],["i32"]]],[11,"as_raw_fd","","",33,[[["self"]],["i32"]]],[11,"write","","",33,N],[11,"flush","","",33,[[["self"]],["result",["error"]]]],[11,"from_raw_fd","","",33,[[["i32"]],["unixstream"]]],[11,"from_raw_fd","","",32,[[["i32"]],["unixlistener"]]],[11,"register","","",33,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",33,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",33,[[["self"],["poll"]],["result",["error"]]]],[11,"register","","",32,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",32,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",32,[[["self"],["poll"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"reacting","sonr::reactor::combinators","",3,[[["self"],["event"]],["bool"]]],[11,"react_to","","",3,N],[11,"react","","",3,[[["self"]],["reaction"]]],[11,"reacting","","",4,[[["self"],["event"]],["bool"]]],[11,"react","","",4,[[["self"]],["reaction"]]],[11,"react_to","","",4,N],[11,"reacting","","",5,[[["self"],["event"]],["bool"]]],[11,"react_to","","",5,N],[11,"react","","",5,[[["self"]],["reaction"]]],[11,"reacting","","",6,[[["self"],["event"]],["bool"]]],[11,"react_to","","",6,N],[11,"react","","",6,[[["self"]],["reaction"]]],[11,"reacting","sonr::reactor::producers","",7,[[["self"],["event"]],["bool"]]],[11,"react","","",7,[[["self"]],["reaction"]]],[11,"react_to","","",7,N],[11,"reacting","sonr::net::tcp","",12,[[["self"],["event"]],["bool"]]],[11,"react","","",12,[[["self"]],["reaction"]]],[11,"reacting","sonr::net::stream","",13,[[["self"],["event"]],["bool"]]],[11,"react","","",13,[[["self"]],["reaction"]]],[11,"reacting","sonr::net::uds","",14,[[["self"],["event"]],["bool"]]],[11,"react","","",14,[[["self"]],["reaction"]]],[11,"reacting","sonr::sync::queue","",16,[[["self"],["event"]],["bool"]]],[11,"react_to","","",16,N],[11,"react","","",16,[[["self"]],["reaction"]]],[11,"reacting","","",18,[[["self"],["event"]],["bool"]]],[11,"react","","",18,[[["self"]],["reaction"]]],[11,"reacting","sonr::sync::signal","",22,[[["self"],["event"]],["bool"]]],[11,"react_to","","",22,N],[11,"react","","",22,[[["self"]],["reaction"]]],[11,"reacting","sonr::sync::broadcast","",34,[[["self"],["event"]],["bool"]]],[11,"react","","",34,[[["self"]],["reaction"]]],[11,"react_to","","",34,N],[11,"clone","sonr::sync::signal","",20,[[["self"]],["self"]]],[11,"clone","sonr::sync::broadcast","",23,[[["self"]],["self"]]],[11,"clone","sonr::sync","",15,[[["self"]],["capacity"]]],[11,"from","sonr::sync::signal","",21,[[["capacity"]],["self"]]],[11,"from","","",21,[[["capacity"]],["self"]]],[11,"from","sonr::sync::broadcast","",23,[[["capacity"]],["self"]]],[11,"from","sonr::errors","",24,[[["error"]],["error"]]],[11,"from","","",24,[[["recverror"]],["error"]]],[11,"from","","",24,[[["tryrecverror"]],["error"]]],[11,"from","","",24,[[["addrparseerror"]],["error"]]],[11,"from","","",24,[[["fromutf8error"]],["error"]]],[11,"drop","sonr::reactor","",9,[[["self"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::system","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::net::stream","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::sync::signal","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::errors","",24,[[["self"],["formatter"]],["result"]]],[11,"index","sonr","",25,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",25,[[["self"],["usize"]],["t"]]],[11,"read","sonr::reactor","",9,N],[11,"read","sonr::net::stream","",13,N],[11,"write","sonr::reactor","",9,N],[11,"flush","","",9,[[["self"]],["result"]]],[11,"write","sonr::net::stream","",13,N],[11,"flush","","",13,[[["self"]],["result"]]],[11,"register","sonr::sync::queue","",19,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",19,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",19,[[["self"],["poll"]],["result"]]],[11,"register","sonr::sync::signal","",21,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",21,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",21,[[["self"],["poll"]],["result"]]],[11,"new","sonr::prelude","Creates a new `Event` containing `readiness` and `token`",26,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",26,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",26,[[["self"]],["token"]]],[11,"empty","sonr","Return a `PollOpt` representing no set options.",27,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered…",27,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered…",27,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",27,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered…",27,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered…",27,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",27,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",27,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",27,N],[11,"remove","","Removes all options represented by `other` from `self`.",27,N],[11,"new","","Return a new `Poll` handle.",28,[[],["result",["poll","error"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",28,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",28,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",28,[[["self"],["e"]],["result",["error"]]]],[11,"poll","","Wait for readiness events",28,[[["self"],["events"],["option",["duration"]]],["result",["usize","error"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",28,[[["self"],["events"],["option",["duration"]]],["result",["usize","error"]]]],[11,"empty","","Returns the empty `Ready` set.",29,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",29,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",29,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",29,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",29,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",29,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",29,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",29,N],[11,"remove","","Removes all options represented by `other` from `self`.",29,N],[11,"contains","","Returns true if `self` is a superset of `other`.",29,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize`…",29,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",29,[[["self"]],["usize"]]],[11,"connect","sonr::net::tcp","Create a new TCP stream and issue a non-blocking connect…",30,[[["socketaddr"]],["result",["tcpstream","error"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside…",30,[[["tcpstream"],["socketaddr"]],["result",["tcpstream","error"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",30,[[["tcpstream"]],["result",["tcpstream","error"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP…",30,[[["self"]],["result",["socketaddr","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP…",30,[[["self"]],["result",["socketaddr","error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",30,[[["self"]],["result",["tcpstream","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",30,[[["self"],["shutdown"]],["result",["error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",30,[[["self"],["bool"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",30,[[["self"]],["result",["bool","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",30,[[["self"],["usize"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",30,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",30,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",30,[[["self"]],["result",["usize","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on…",30,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this…",30,[[["self"]],["result",["option","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",30,[[["self"],["u32"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",30,[[["self"]],["result",["u32","error"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",30,[[["self"],["bool"]],["result",["error"]]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",30,[[["self"]],["result",["bool","error"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",30,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",30,[[["self"]],["result",["option","error"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",30,[[["self"]],["result",["option","error"]]]],[11,"peek","","Receives data on the socket from the remote address to…",30,N],[11,"read_bufs","","Read in a list of buffers all at once.",30,N],[11,"write_bufs","","Write a list of buffers all at once.",30,N],[11,"bind","","Convenience method to bind a new TCP listener to the…",31,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a…",31,[[["tcplistener"]],["result",["tcplistener","error"]]]],[11,"accept","","Accepts a new `TcpStream`.",31,[[["self"]],["result",["error"]]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",31,[[["self"]],["result",["error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",31,[[["self"]],["result",["socketaddr","error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",31,[[["self"]],["result",["tcplistener","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",31,[[["self"],["u32"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",31,[[["self"]],["result",["u32","error"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",31,[[["self"],["bool"]],["result",["error"]]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",31,[[["self"]],["result",["bool","error"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",31,[[["self"]],["result",["option","error"]]]],[11,"bind","sonr::net::uds","Creates a new `UnixListener` bound to the specified socket.",32,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_listener","","Consumes a standard library `UnixListener` and returns a…",32,[[["unixlistener"]],["result",["unixlistener","error"]]]],[11,"accept","","Accepts a new incoming connection to this listener.",32,[[["self"]],["result",["option","error"]]]],[11,"accept_std","","Accepts a new incoming connection to this listener.",32,[[["self"]],["result",["option","error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",32,[[["self"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",32,[[["self"]],["result",["socketaddr","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",32,[[["self"]],["result",["option","error"]]]],[11,"connect","","Connects to the socket named by `path`.",33,[[["p"]],["result",["unixstream","error"]]]],[11,"from_stream","","Consumes a standard library `UnixStream` and returns a…",33,[[["unixstream"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",33,[[],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",33,[[["self"]],["result",["unixstream","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this…",33,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this…",33,[[["self"]],["result",["socketaddr","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",33,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",33,[[["self"],["shutdown"]],["result",["error"]]]],[11,"read_bufs","","Read in a list of buffers all at once.",33,N],[11,"write_bufs","","Write a list of buffers all at once.",33,N]],"paths":[[3,"Token"],[8,"Evented"],[4,"Reaction"],[3,"Chain"],[3,"And"],[3,"Callback"],[3,"Map"],[3,"EventedGenerator"],[8,"Reactive"],[3,"EventedReactor"],[4,"SystemEvent"],[3,"System"],[3,"ReactiveTcpListener"],[3,"Stream"],[3,"ReactiveUdsListener"],[4,"Capacity"],[3,"ReactiveQueue"],[3,"Queue"],[3,"ReactiveDeque"],[3,"Dequeue"],[3,"SignalSender"],[3,"SignalReceiver"],[3,"ReactiveSignalReceiver"],[3,"Broadcast"],[4,"Error"],[3,"PreVec"],[3,"Event"],[3,"PollOpt"],[3,"Poll"],[3,"Ready"],[3,"TcpStream"],[3,"TcpListener"],[3,"UnixListener"],[3,"UnixStream"],[3,"ReactiveBroadcast"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
