var N = null;var searchIndex = {};
searchIndex["sonr"]={"doc":"Simple Opinionated Networking in Rust","items":[[3,"Token","sonr","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",1,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",1,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",1,[[["self"],["poll"]],["result",["error"]]]],[3,"PollOpt","","Options supplied when registering an `Evented` handle with…",N,N],[3,"Poll","","Polls for readiness events on all registered values.",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"PreVec","","`PreVec`: a collection that allows inserts at a specific…",N,N],[0,"reactor","","Reactors are the heart of Sonr and work by pushing data…",N,N],[3,"EventedReactor","sonr::reactor","The `EventedReactor` is driven by the [`System`].",N,N],[4,"Reaction","","Input / Output of a [`Reactor`].",N,N],[13,"Continue","","Continue",2,N],[13,"Event","","A Mio event.",2,N],[13,"Value","","Value",2,N],[0,"combinators","","Combine [`Reactor`]s creating new [`Reactor`]s.",N,N],[3,"Chain","sonr::reactor::combinators","Chain two [`Reactor`]s together, making the output of the…",N,N],[3,"And","","Use `and` to run more than one (evented) reactor in…",N,N],[3,"Map","","Map will capture the `Reaction::Value(val)` returned by…",N,N],[11,"new","","Create a chain of two [`Reactors`].",3,[[["f"],["t"]],["self"]]],[11,"new","","Create a new `And` from two reactors.",4,[[["t"],["u"]],["self"]]],[11,"new","","Create a new map from a reactor and a closure.",5,[[["s"],["f"]],["self"]]],[0,"producers","sonr::reactor","There are two producers: * [`Mono`] *…",N,N],[3,"ReactiveGenerator","sonr::reactor::producers","The [`ReactiveGenerator`] reacts as soon as the [`System`]…",N,N],[3,"Mono","","A [`Mono`] reacts as soon as the [`System`] starts and…",N,N],[11,"new","","Creates a new `ReactiveGenerator` with the given collection.",6,[[["vec"]],["result"]]],[11,"new","","Create a new `Mono`.",7,[[["t"]],["result"]]],[8,"Reactor","sonr::reactor","A reactor reacts to a [`Reaction`] and returns a…",N,N],[16,"Output","","The output passed to the next reactor in the chain.",8,N],[16,"Input","","Expected input type from the previous reactor in the chain.",8,N],[10,"react","","The generated output is passed as the input to the next…",8,[[["self"],["reaction"]],["reaction"]]],[11,"chain","","Chain two reactors together. The output of the first…",8,[[["self"],["t"]],["chain"]]],[11,"and","","Run two reactors independent of each other. ```no_run #…",8,[[["self"],["c"]],["and"]]],[11,"map","","Capture the output of a reactor in a closure. `no_run //…",8,[[["self"],["f"]],["map"]]],[11,"new","","Create a new instance of an `EventedReactor`.",9,[[["e"],["ready"]],["result"]]],[11,"inner","","Reference to the underlying evented type",9,[[["self"]],["e"]]],[11,"inner_mut","","Mutable reference to the underlying evented type",9,[[["self"]],["e"]]],[11,"token","","Return the `Token` used to register the inner type with…",9,[[["self"]],["token"]]],[11,"interest","","Return the interests of the reactor, usually readable…",9,[[["self"]],["ready"]]],[0,"system","sonr","The `System` handles polling events, registering evented…",N,N],[3,"System","sonr::system","`System` is thread local and has to exist for each thread…",N,N],[4,"SystemEvent","","Specific event the [`System`] responds to NOTE: There…",N,N],[13,"Stop","","Stop the System",10,N],[11,"init","","Initialise the system for the current thread. Should only…",11,[[],["result",["signalsender"]]]],[11,"register","","Register an `Evented` with the System.",11,N],[11,"reregister","","Reregister an evented reactor.",11,[[["eventedreactor"]],["result"]]],[11,"start","","Start the event loop. This will run until…",11,[[["r"]],["result"]]],[11,"free_token","","The token can be registered with another reactor. This is…",11,[[["token"]]]],[11,"reserve_token","","Reserve a token",11,[[],["result",["token"]]]],[11,"send","","Send a system event to the current system.",11,[[["systemevent"]]]],[0,"net","sonr","Network Reactors",N,N],[0,"tcp","sonr::net","Reactive Tcp networking",N,N],[3,"TcpStream","sonr::net::tcp","A non-blocking TCP stream between a local socket and a…",N,N],[3,"TcpListener","","A structure representing a socket server",N,N],[3,"ReactiveTcpListener","","Accept incoming connections and output `(TcpStream,…",N,N],[6,"ReactiveTcpStream","","A reactive tcp stream. See [`Stream`].",N,N],[11,"new","","Create a new listener from a mio::TcpListener",12,[[["tcplistener"]],["result"]]],[11,"bind","","Create a new listener from an address",12,[[["str"]],["result"]]],[11,"token","","Get `Token` registered with the listener;",12,[[["self"]],["token"]]],[11,"connect","","Create a new reactive tcp stream from a &SocketAddr",13,[[["socketaddr"]],["result"]]],[0,"stream","sonr::net","Stream",N,N],[3,"Stream","sonr::net::stream","When a [`Stream`] `react`s the inner evented reactor is…",N,N],[8,"StreamRef","","Anything that has a stream",N,N],[16,"Evented","","The Evented type for the Stream",14,N],[10,"stream_ref","","Immutable reference to the stream",14,[[["self"]],["stream"]]],[10,"stream_mut","","Mutable reference to the stream",14,[[["self"]],["stream"]]],[11,"into_inner","","Consume the stream and return the underlying evented reactor",15,[[["self"]],["eventedreactor"]]],[11,"new","","Create a new stream",15,[[["t"]],["result"]]],[11,"token","","The token used to track readiness of the underlying stream",15,[[["self"]],["token"]]],[11,"readable","","Is the underlying object readable?",15,[[["self"]],["bool"]]],[11,"writable","","Is the underlying object writable?",15,[[["self"]],["bool"]]],[11,"inner","","Reference the underlying object",15,[[["self"]],["t"]]],[11,"inner_mut","","Mutable reference to the underlying object",15,[[["self"]],["t"]]],[0,"uds","sonr::net","Unix Domain Sockets",N,N],[3,"UnixListener","sonr::net::uds","A structure representing a Unix domain socket server.",N,N],[3,"UnixStream","","A Unix stream socket.",N,N],[3,"ReactiveUdsListener","","Accept incoming connections and output `(UnixStream,…",N,N],[6,"ReactiveUdsStream","","Type alias for `Stream<UnixStream>`",N,N],[11,"bind","","Create a new Reactive UnixListener",16,N],[11,"token","","Get `Token` registered with the listener;",16,[[["self"]],["token"]]],[11,"connect","","Create a new reactive uds stream from a &str",17,[[["str"]],["result"]]],[0,"sync","sonr","Reactive queue, broadcaster and single mpsc",N,N],[4,"Capacity","sonr::sync","Queue / Signal capacity",N,N],[13,"Unbounded","","Unlimited number of messages",18,N],[13,"Bounded","","Limited number of messages",18,N],[0,"queue","","Reactive queue / dequeue",N,N],[3,"ReactiveQueue","sonr::sync::queue","A reactive work stealing queue.",N,N],[3,"Queue","","An evented work stealing queue.",N,N],[3,"ReactiveDeque","","A reactive dequeue.",N,N],[3,"Dequeue","","An evented work stealing dequeue",N,N],[11,"unbounded","","Create an unbounded reactive queue",19,[[],["self"]]],[11,"bounded","","Create an bounded reactive queue. Setting the capacity to…",19,[[["usize"]],["self"]]],[11,"push","","Push a value onto the queue",19,[[["self"],["t"]]]],[11,"deque","","Create an instance of a [`Dequeue`]. A [`Dequeue`] is not…",19,[[["self"]],["dequeue"]]],[11,"unbounded","","Create an unbounded queue",20,[[],["self"]]],[11,"bounded","","Create a bounded queue. Setting the capacity to zero means…",20,[[["usize"]],["self"]]],[11,"push","","Push a value onto the queue",20,[[["self"],["t"]]]],[11,"deque","","Create an instance of a [`Dequeu`].",20,[[["self"]],["dequeue"]]],[11,"new","","Create a new reactive dequeue fro man existing [`Dequeue`]",21,[[["dequeue"]],["result"]]],[11,"bounded","","Create a bounded dequeue. Setting the capacity to zero…",22,[[["stealer"],["usize"]],["self"]]],[11,"unbounded","","Create an unbounded dequeue ",22,[[["stealer"]],["self"]]],[11,"sender","","Get the signal sender that notifies the dequeue of…",22,[[["self"]],["signalsender"]]],[11,"steal","","Attempt to steal data",22,[[["self"]],["steal"]]],[0,"signal","sonr::sync","Signals used to send data between threads.",N,N],[3,"SignalSender","sonr::sync::signal","Evented signal sender, used to send data between threads.…",N,N],[3,"SignalReceiver","","Evented receiver.",N,N],[3,"ReactiveSignalReceiver","","React when new data is ready to be received",N,N],[11,"send","","Send data to a receiver.",23,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"unbounded","","Create an unbounded receiver",24,[[],["self"]]],[11,"bounded","","Create a bounded receiver. Setting the capacity to zero…",24,[[["usize"]],["self"]]],[11,"try_recv","","Try to receive a value from the underlying channel",24,[[["self"]],["result"]]],[11,"sender","","Create an instance of a sender. It's possible to create…",24,[[["self"]],["signalsender"]]],[11,"new","","Create a new signal receiver",25,[[["signalreceiver"]],["result"]]],[11,"try_recv","","Attempt to receive data. Should be called after the…",25,[[["self"]],["result"]]],[11,"token","","Get an instance of the [`Token`] used to register the…",25,[[["self"]],["token"]]],[11,"sender","","Create a signal sender for the underlying receiver.",25,[[["self"]],["signalsender"]]],[0,"broadcast","sonr::sync","Broadcast ",N,N],[3,"Broadcast","sonr::sync::broadcast","Broadcast value to all subscribers.",N,N],[3,"ReactiveBroadcast","","A reactive broadcaster",N,N],[11,"unbounded","","Create an unbounded broadcaster",26,[[],["self"]]],[11,"bounded","","Create an bounded broadcaster",26,[[["usize"]],["self"]]],[11,"subscriber","","Create a new subscriber of the data",26,[[["self"]],["signalreceiver"]]],[11,"publish","","Publish data to all subscribers. Note that the published…",26,[[["self"],["t"]]]],[0,"errors","sonr","SONR default `Error`",N,N],[4,"Error","sonr::errors","Wrapping error type.",N,N],[13,"Io","","std::io::Error",27,N],[13,"NoConnection","","No connection: A connection with a specific `Token` no…",27,N],[13,"ConnectionRemoved","","The connection was removed either by closing the socket or…",27,N],[13,"NoCapacity","","The `PreVec` does not have capacity for the new entry",27,N],[13,"AlreadyRegistered","","The session was already registered. A session can only be…",27,N],[13,"NoUdsConnection","","No unix domain socket waiting for a connection",27,N],[13,"TryRecvError","","Try receive error",27,N],[13,"RecvError","","Receive error",27,N],[13,"AddrParseError","","Address parse error",27,N],[13,"FromUtf8Error","","From UTF8 error",27,N],[6,"Result","","Result type: `std::result::Error<T, Error>`",N,N],[11,"with_capacity","sonr","Create a `PreVec` with a set capacity. Inserting above…",28,[[["usize"]],["self"]]],[11,"with_capacity_and_offset","","Create a `PreVec` with a set capacity and offset.",28,[[["usize"],["usize"]],["self"]]],[11,"capacity","","Return the capacity",28,[[["self"]],["usize"]]],[11,"offset","","Return the offset",28,[[["self"]],["usize"]]],[11,"prevent_growth","","Prevent inserting above the capacity.",28,[[["self"]]]],[11,"enable_growth","","Enable the collection to grow and allocate more space.",28,[[["self"]]]],[11,"in_range","","Check if the index is within the range of the collection…",28,[[["self"],["usize"]],["bool"]]],[11,"set_offset","","Set the offset of the collection.",28,[[["self"],["usize"]]]],[11,"get","","Get an entry at a specific index",28,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Get a mutable entry at a specific index",28,[[["self"],["usize"]],["option"]]],[11,"insert","","Insert a value in the next available slot and return the…",28,[[["self"],["t"]],["result",["usize"]]]],[11,"remove","","Remove at index (inserting an empty entry)",28,[[["self"],["usize"]],["option"]]],[11,"len","","Number of occupied slots",28,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the collection has no entries",28,[[["self"]],["bool"]]],[11,"clear","","Remove all entries",28,[[["self"]]]],[0,"prelude","","",N,N],[3,"Token","sonr::prelude","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","sonr","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","sonr::reactor","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","sonr::reactor::combinators","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","sonr::reactor::producers","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","sonr::system","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","sonr::net::tcp","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","sonr::net::stream","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","sonr::net::uds","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","sonr::sync","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","sonr::sync::queue","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","sonr::sync::signal","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","sonr::sync::broadcast","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","sonr::errors","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"sub","sonr","",32,[[["self"],["t"]],["ready"]]],[11,"sub","","",30,[[["self"],["pollopt"]],["pollopt"]]],[11,"hash","sonr::prelude","",0,N],[11,"bitxor","sonr","",32,[[["self"],["t"]],["ready"]]],[11,"bitxor","","",30,[[["self"],["pollopt"]],["pollopt"]]],[11,"from","sonr::prelude","",0,[[["usize"]],["token"]]],[11,"from","sonr","",32,[[["unixready"]],["ready"]]],[11,"register","sonr::net::tcp","",33,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",33,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",33,[[["self"],["poll"]],["result",["error"]]]],[11,"register","","",34,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",34,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",34,[[["self"],["poll"]],["result",["error"]]]],[11,"eq","sonr","",32,[[["self"],["ready"]],["bool"]]],[11,"ne","","",32,[[["self"],["ready"]],["bool"]]],[11,"eq","sonr::prelude","",29,[[["self"],["event"]],["bool"]]],[11,"ne","","",29,[[["self"],["event"]],["bool"]]],[11,"eq","sonr","",30,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",30,[[["self"],["pollopt"]],["bool"]]],[11,"eq","sonr::prelude","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"from_raw_fd","sonr::net::tcp","",34,[[["i32"]],["tcplistener"]]],[11,"from_raw_fd","","",33,[[["i32"]],["tcpstream"]]],[11,"bitor_assign","sonr","",32,N],[11,"bitand","","",30,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",32,[[["self"],["t"]],["ready"]]],[11,"cmp","","",30,[[["self"],["pollopt"]],["ordering"]]],[11,"cmp","","",32,[[["self"],["ready"]],["ordering"]]],[11,"cmp","sonr::prelude","",0,[[["self"],["token"]],["ordering"]]],[11,"partial_cmp","sonr","",30,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",30,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",30,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",30,[[["self"],["pollopt"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["ready"]],["bool"]]],[11,"le","","",32,[[["self"],["ready"]],["bool"]]],[11,"gt","","",32,[[["self"],["ready"]],["bool"]]],[11,"ge","","",32,[[["self"],["ready"]],["bool"]]],[11,"partial_cmp","sonr::prelude","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"bitor","sonr","",30,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitor","","",32,[[["self"],["t"]],["ready"]]],[11,"read","sonr::net::tcp","",33,N],[11,"into_raw_fd","","",33,[[["self"]],["i32"]]],[11,"into_raw_fd","","",34,[[["self"]],["i32"]]],[11,"as_raw_fd","","",34,[[["self"]],["i32"]]],[11,"as_raw_fd","sonr","",31,[[["self"]],["i32"]]],[11,"as_raw_fd","sonr::net::tcp","",33,[[["self"]],["i32"]]],[11,"write","","",33,N],[11,"flush","","",33,[[["self"]],["result",["error"]]]],[11,"bitxor_assign","sonr","",32,N],[11,"clone","","",32,[[["self"]],["ready"]]],[11,"clone","","",30,[[["self"]],["pollopt"]]],[11,"clone","sonr::prelude","",29,[[["self"]],["event"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"sub_assign","sonr","",32,N],[11,"bitand_assign","","",32,N],[11,"fmt","sonr::net::tcp","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr::prelude","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","sonr","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","sonr::net::uds","",36,N],[11,"into_raw_fd","","",36,[[["self"]],["i32"]]],[11,"into_raw_fd","","",35,[[["self"]],["i32"]]],[11,"as_raw_fd","","",35,[[["self"]],["i32"]]],[11,"as_raw_fd","","",36,[[["self"]],["i32"]]],[11,"write","","",36,N],[11,"flush","","",36,[[["self"]],["result",["error"]]]],[11,"from_raw_fd","","",36,[[["i32"]],["unixstream"]]],[11,"from_raw_fd","","",35,[[["i32"]],["unixlistener"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"register","","",35,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",35,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",35,[[["self"],["poll"]],["result",["error"]]]],[11,"register","","",36,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","",36,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","",36,[[["self"],["poll"]],["result",["error"]]]],[11,"react","sonr::reactor::combinators","",3,[[["self"],["reaction"]],["reaction"]]],[11,"react","","",4,[[["self"],["reaction"]],["reaction"]]],[11,"react","","",5,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::reactor::producers","",6,[[["self"],["reaction"]],["reaction"]]],[11,"react","","",7,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::net::tcp","",12,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::net::stream","",15,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::net::uds","",16,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::sync::queue","",19,[[["self"],["reaction"]],["reaction"]]],[11,"react","","",21,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::sync::signal","",25,[[["self"],["reaction"]],["reaction"]]],[11,"react","sonr::sync::broadcast","",37,[[["self"],["reaction"]],["reaction"]]],[11,"stream_ref","sonr","",13,[[["self"]],["self"]]],[11,"stream_mut","","",13,[[["self"]],["self"]]],[11,"stream_ref","","",17,[[["self"]],["self"]]],[11,"stream_mut","","",17,[[["self"]],["self"]]],[11,"as_ref","sonr::net::stream","",15,[[["self"]],["stream"]]],[11,"clone","sonr::sync::signal","",23,[[["self"]],["self"]]],[11,"clone","sonr::sync::broadcast","",26,[[["self"]],["self"]]],[11,"clone","sonr::sync","",18,[[["self"]],["capacity"]]],[11,"from","sonr::reactor","",2,[[["event"]],["reaction"]]],[11,"from","sonr::net::stream","",15,[[["eventedreactor"]],["self"]]],[11,"from","sonr::sync::signal","",24,[[["capacity"]],["self"]]],[11,"from","","",24,[[["capacity"]],["self"]]],[11,"from","sonr::sync::broadcast","",26,[[["capacity"]],["self"]]],[11,"from","sonr::errors","",27,[[["error"]],["error"]]],[11,"from","","",27,[[["recverror"]],["error"]]],[11,"from","","",27,[[["tryrecverror"]],["error"]]],[11,"from","","",27,[[["addrparseerror"]],["error"]]],[11,"from","","",27,[[["fromutf8error"]],["error"]]],[11,"drop","sonr::reactor","",9,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::system","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::net::stream","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::sync::signal","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","sonr::errors","",27,[[["self"],["formatter"]],["result"]]],[11,"index","sonr","",28,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",28,[[["self"],["usize"]],["t"]]],[11,"read","sonr::reactor","",9,N],[11,"read","sonr::net::stream","",15,N],[11,"write","sonr::reactor","",9,N],[11,"flush","","",9,[[["self"]],["result"]]],[11,"write","sonr::net::stream","",15,N],[11,"flush","","",15,[[["self"]],["result"]]],[11,"register","sonr::sync::queue","",22,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",22,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",22,[[["self"],["poll"]],["result"]]],[11,"register","sonr::sync::signal","",24,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",24,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",24,[[["self"],["poll"]],["result"]]],[11,"new","sonr::prelude","Creates a new `Event` containing `readiness` and `token`",29,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",29,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",29,[[["self"]],["token"]]],[11,"empty","sonr","Return a `PollOpt` representing no set options.",30,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered…",30,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered…",30,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",30,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered…",30,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered…",30,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",30,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",30,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",30,N],[11,"remove","","Removes all options represented by `other` from `self`.",30,N],[11,"new","","Return a new `Poll` handle.",31,[[],["result",["poll","error"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",31,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",31,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result",["error"]]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",31,[[["self"],["e"]],["result",["error"]]]],[11,"poll","","Wait for readiness events",31,[[["self"],["events"],["option",["duration"]]],["result",["usize","error"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",31,[[["self"],["events"],["option",["duration"]]],["result",["usize","error"]]]],[11,"empty","","Returns the empty `Ready` set.",32,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",32,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",32,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",32,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",32,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",32,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",32,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",32,N],[11,"remove","","Removes all options represented by `other` from `self`.",32,N],[11,"contains","","Returns true if `self` is a superset of `other`.",32,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize`…",32,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",32,[[["self"]],["usize"]]],[11,"connect","sonr::net::tcp","Create a new TCP stream and issue a non-blocking connect…",33,[[["socketaddr"]],["result",["tcpstream","error"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside…",33,[[["tcpstream"],["socketaddr"]],["result",["tcpstream","error"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",33,[[["tcpstream"]],["result",["tcpstream","error"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP…",33,[[["self"]],["result",["socketaddr","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP…",33,[[["self"]],["result",["socketaddr","error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",33,[[["self"]],["result",["tcpstream","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",33,[[["self"],["shutdown"]],["result",["error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",33,[[["self"],["bool"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",33,[[["self"]],["result",["bool","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",33,[[["self"],["usize"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",33,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",33,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",33,[[["self"]],["result",["usize","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on…",33,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this…",33,[[["self"]],["result",["option","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",33,[[["self"],["u32"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",33,[[["self"]],["result",["u32","error"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",33,[[["self"],["bool"]],["result",["error"]]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",33,[[["self"]],["result",["bool","error"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",33,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",33,[[["self"]],["result",["option","error"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",33,[[["self"]],["result",["option","error"]]]],[11,"peek","","Receives data on the socket from the remote address to…",33,N],[11,"read_bufs","","Read in a list of buffers all at once.",33,N],[11,"write_bufs","","Write a list of buffers all at once.",33,N],[11,"bind","","Convenience method to bind a new TCP listener to the…",34,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a…",34,[[["tcplistener"]],["result",["tcplistener","error"]]]],[11,"accept","","Accepts a new `TcpStream`.",34,[[["self"]],["result",["error"]]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",34,[[["self"]],["result",["error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",34,[[["self"]],["result",["socketaddr","error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",34,[[["self"]],["result",["tcplistener","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",34,[[["self"],["u32"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",34,[[["self"]],["result",["u32","error"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",34,[[["self"],["bool"]],["result",["error"]]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",34,[[["self"]],["result",["bool","error"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",34,[[["self"]],["result",["option","error"]]]],[11,"bind","sonr::net::uds","Creates a new `UnixListener` bound to the specified socket.",35,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_listener","","Consumes a standard library `UnixListener` and returns a…",35,[[["unixlistener"]],["result",["unixlistener","error"]]]],[11,"accept","","Accepts a new incoming connection to this listener.",35,[[["self"]],["result",["option","error"]]]],[11,"accept_std","","Accepts a new incoming connection to this listener.",35,[[["self"]],["result",["option","error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",35,[[["self"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",35,[[["self"]],["result",["socketaddr","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",35,[[["self"]],["result",["option","error"]]]],[11,"connect","","Connects to the socket named by `path`.",36,[[["p"]],["result",["unixstream","error"]]]],[11,"from_stream","","Consumes a standard library `UnixStream` and returns a…",36,[[["unixstream"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",36,[[],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",36,[[["self"]],["result",["unixstream","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this…",36,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this…",36,[[["self"]],["result",["socketaddr","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",36,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",36,[[["self"],["shutdown"]],["result",["error"]]]],[11,"read_bufs","","Read in a list of buffers all at once.",36,N],[11,"write_bufs","","Write a list of buffers all at once.",36,N]],"paths":[[3,"Token"],[8,"Evented"],[4,"Reaction"],[3,"Chain"],[3,"And"],[3,"Map"],[3,"ReactiveGenerator"],[3,"Mono"],[8,"Reactor"],[3,"EventedReactor"],[4,"SystemEvent"],[3,"System"],[3,"ReactiveTcpListener"],[6,"ReactiveTcpStream"],[8,"StreamRef"],[3,"Stream"],[3,"ReactiveUdsListener"],[6,"ReactiveUdsStream"],[4,"Capacity"],[3,"ReactiveQueue"],[3,"Queue"],[3,"ReactiveDeque"],[3,"Dequeue"],[3,"SignalSender"],[3,"SignalReceiver"],[3,"ReactiveSignalReceiver"],[3,"Broadcast"],[4,"Error"],[3,"PreVec"],[3,"Event"],[3,"PollOpt"],[3,"Poll"],[3,"Ready"],[3,"TcpStream"],[3,"TcpListener"],[3,"UnixListener"],[3,"UnixStream"],[3,"ReactiveBroadcast"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
